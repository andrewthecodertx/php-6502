<?php

require_once 'vendor/autoload.php';

use Emulator\Memory;
use Emulator\EnhancedCPU;
use Emulator\Bus\SystemBus;
use Emulator\Peripherals\TextDisplay;
use Emulator\Peripherals\SoundController;
use Emulator\Peripherals\EnhancedConsole;

echo "🎮 === AUTO-RUNNING 6502 ENHANCED SYSTEM DEMO === 🎮\n\n";

// Create the enhanced system
$memory = new Memory();
$bus = new SystemBus($memory);

$display = new TextDisplay();
$sound = new SoundController();
$console = new EnhancedConsole($display);

$bus->addPeripheral($display);
$bus->addPeripheral($sound);
$bus->addPeripheral($console);

$cpu = new EnhancedCPU($bus);

// Set up reset vector
$memory->write_byte(0xFFFC, 0x00);
$memory->write_byte(0xFFFD, 0x80);

// Auto-progressing demo program (skips interactive input)
$program = [
  // === MAIN PROGRAM ===
  0x8000 => 0x20, 0x8001 => 0x00, 0x8002 => 0x81,  // JSR $8100 (welcome)
  0x8003 => 0x20, 0x8004 => 0x50, 0x8005 => 0x81,  // JSR $8150 (display_demo)
  0x8006 => 0x20, 0x8007 => 0xA0, 0x8008 => 0x81,  // JSR $81A0 (sound_demo)
  0x8009 => 0x20, 0x800A => 0xF0, 0x800B => 0x81,  // JSR $81F0 (color_demo)
  0x800C => 0x20, 0x800D => 0x40, 0x800E => 0x82,  // JSR $8240 (finale)
  // Infinite loop
  0x800F => 0x4C, 0x8010 => 0x0F, 0x8011 => 0x80,  // JMP $800F

  // === WELCOME SUBROUTINE ($8100) ===
  0x8100 => 0xA9, 0x8101 => 0x01,        // LDA #$01 (clear screen)
  0x8102 => 0x8D, 0x8103 => 0xEC, 0x8104 => 0xC3,  // STA $C3EC

  // Write "6502 ENHANCED SYSTEM!" centered
  0x8105 => 0xA9, 0x8106 => ord('6'),    // LDA #'6'
  0x8107 => 0x8D, 0x8108 => 0x0A, 0x8109 => 0xC0,  // STA $C00A
  0x810A => 0xA9, 0x810B => ord('5'),    // LDA #'5'
  0x810C => 0x8D, 0x810D => 0x0B, 0x810E => 0xC0,  // STA $C00B
  0x810F => 0xA9, 0x8110 => ord('0'),    // LDA #'0'
  0x8111 => 0x8D, 0x8112 => 0x0C, 0x8113 => 0xC0,  // STA $C00C
  0x8114 => 0xA9, 0x8115 => ord('2'),    // LDA #'2'
  0x8116 => 0x8D, 0x8117 => 0x0D, 0x8118 => 0xC0,  // STA $C00D
  0x8119 => 0xA9, 0x811A => ord(' '),    // LDA #' '
  0x811B => 0x8D, 0x811C => 0x0E, 0x811D => 0xC0,  // STA $C00E
  0x811E => 0xA9, 0x811F => ord('S'),    // LDA #'S'
  0x8120 => 0x8D, 0x8121 => 0x0F, 0x8122 => 0xC0,  // STA $C00F
  0x8123 => 0xA9, 0x8124 => ord('Y'),    // LDA #'Y'
  0x8125 => 0x8D, 0x8126 => 0x10, 0x8127 => 0xC0,  // STA $C010
  0x8128 => 0xA9, 0x8129 => ord('S'),    // LDA #'S'
  0x812A => 0x8D, 0x812B => 0x11, 0x812C => 0xC0,  // STA $C011
  0x812D => 0xA9, 0x812E => ord('T'),    // LDA #'T'
  0x812F => 0x8D, 0x8130 => 0x12, 0x8131 => 0xC0,  // STA $C012
  0x8132 => 0xA9, 0x8133 => ord('E'),    // LDA #'E'
  0x8134 => 0x8D, 0x8135 => 0x13, 0x8136 => 0xC0,  // STA $C013
  0x8137 => 0xA9, 0x8138 => ord('M'),    // LDA #'M'
  0x8139 => 0x8D, 0x813A => 0x14, 0x813B => 0xC0,  // STA $C014
  0x813C => 0xA9, 0x813D => ord('!'),    // LDA #'!'
  0x813E => 0x8D, 0x813F => 0x15, 0x8140 => 0xC0,  // STA $C015

  // Medium delay
  0x8141 => 0xA2, 0x8142 => 0x80,        // LDX #$80
  0x8143 => 0xCA,                        // DEX
  0x8144 => 0xD0, 0x8145 => 0xFD,        // BNE -3
  0x8146 => 0x60,                        // RTS

  // === DISPLAY DEMO SUBROUTINE ($8150) ===
  0x8150 => 0xA9, 0x8151 => 0x01,        // LDA #$01 (clear)
  0x8152 => 0x8D, 0x8153 => 0xEC, 0x8154 => 0xC3,  // STA $C3EC

  // Write "DISPLAY TEST"
  0x8155 => 0xA9, 0x8156 => ord('D'),    // LDA #'D'
  0x8157 => 0x8D, 0x8158 => 0x00, 0x8159 => 0xC0,  // STA $C000
  0x815A => 0xA9, 0x815B => ord('I'),    // LDA #'I'
  0x815C => 0x8D, 0x815D => 0x01, 0x815E => 0xC0,  // STA $C001
  0x815F => 0xA9, 0x8160 => ord('S'),    // LDA #'S'
  0x8161 => 0x8D, 0x8162 => 0x02, 0x8163 => 0xC0,  // STA $C002
  0x8164 => 0xA9, 0x8165 => ord('P'),    // LDA #'P'
  0x8166 => 0x8D, 0x8167 => 0x03, 0x8168 => 0xC0,  // STA $C003
  0x8169 => 0xA9, 0x816A => ord('L'),    // LDA #'L'
  0x816B => 0x8D, 0x816C => 0x04, 0x816D => 0xC0,  // STA $C004
  0x816E => 0xA9, 0x816F => ord('A'),    // LDA #'A'
  0x8170 => 0x8D, 0x8171 => 0x05, 0x8172 => 0xC0,  // STA $C005
  0x8173 => 0xA9, 0x8174 => ord('Y'),    // LDA #'Y'
  0x8175 => 0x8D, 0x8176 => 0x06, 0x8177 => 0xC0,  // STA $C006

  // Draw full alphabet
  0x8178 => 0xA2, 0x8179 => 0x00,        // LDX #$00
  0x817A => 0x8A,                        // TXA
  0x817B => 0x18,                        // CLC
  0x817C => 0x69, 0x817D => 0x41,        // ADC #'A'
  0x817E => 0x9D, 0x817F => 0x28, 0x8180 => 0xC0,  // STA $C028,X (row 2)
  0x8181 => 0xE8,                        // INX
  0x8182 => 0xE0, 0x8183 => 0x1A,        // CPX #26
  0x8184 => 0xD0, 0x8185 => 0xF4,        // BNE -12

  // Medium delay
  0x8186 => 0xA2, 0x8187 => 0x80,        // LDX #$80
  0x8188 => 0xCA,                        // DEX
  0x8189 => 0xD0, 0x818A => 0xFD,        // BNE -3
  0x818B => 0x60,                        // RTS

  // === SOUND DEMO SUBROUTINE ($81A0) ===
  0x81A0 => 0xA9, 0x81A1 => 0x01,        // LDA #$01 (clear)
  0x81A2 => 0x8D, 0x81A3 => 0xEC, 0x81A4 => 0xC3,  // STA $C3EC

  // Write "SOUND TEST"
  0x81A5 => 0xA9, 0x81A6 => ord('S'),    // LDA #'S'
  0x81A7 => 0x8D, 0x81A8 => 0x00, 0x81A9 => 0xC0,  // STA $C000
  0x81AA => 0xA9, 0x81AB => ord('O'),    // LDA #'O'
  0x81AC => 0x8D, 0x81AD => 0x01, 0x81AE => 0xC0,  // STA $C001
  0x81AF => 0xA9, 0x81B0 => ord('U'),    // LDA #'U'
  0x81B1 => 0x8D, 0x81B2 => 0x02, 0x81B3 => 0xC0,  // STA $C002
  0x81B4 => 0xA9, 0x81B5 => ord('N'),    // LDA #'N'
  0x81B6 => 0x8D, 0x81B7 => 0x03, 0x81B8 => 0xC0,  // STA $C003
  0x81B9 => 0xA9, 0x81BA => ord('D'),    // LDA #'D'
  0x81BB => 0x8D, 0x81BC => 0x04, 0x81BD => 0xC0,  // STA $C004

  // Play multiple tones
  0x81BE => 0xA2, 0x81BF => 0x03,        // LDX #$03 (3 channels)

  // Channel 0: 440Hz
  0x81C0 => 0xA9, 0x81C1 => 0x40,        // LDA #$40
  0x81C2 => 0x8D, 0x81C3 => 0x00, 0x81C4 => 0xC4,  // STA $C400
  0x81C5 => 0xA9, 0x81C6 => 0x01,        // LDA #$01
  0x81C7 => 0x8D, 0x81C8 => 0x01, 0x81C9 => 0xC4,  // STA $C401
  0x81CA => 0xA9, 0x81CB => 0x08,        // LDA #$08
  0x81CC => 0x8D, 0x81CD => 0x02, 0x81CE => 0xC4,  // STA $C402
  0x81CF => 0xA9, 0x81D0 => 0x01,        // LDA #$01
  0x81D1 => 0x8D, 0x81D2 => 0x03, 0x81D3 => 0xC4,  // STA $C403

  // Channel 1: Higher tone
  0x81D4 => 0xA9, 0x81D5 => 0x80,        // LDA #$80
  0x81D6 => 0x8D, 0x81D7 => 0x04, 0x81D8 => 0xC4,  // STA $C404
  0x81D9 => 0xA9, 0x81DA => 0x02,        // LDA #$02
  0x81DB => 0x8D, 0x81DC => 0x05, 0x81DD => 0xC4,  // STA $C405
  0x81DE => 0xA9, 0x81DF => 0x06,        // LDA #$06
  0x81E0 => 0x8D, 0x81E1 => 0x06, 0x81E2 => 0xC4,  // STA $C406
  0x81E3 => 0xA9, 0x81E4 => 0x01,        // LDA #$01
  0x81E5 => 0x8D, 0x81E6 => 0x07, 0x81E7 => 0xC4,  // STA $C407

  // Delay for sound
  0x81E8 => 0xA2, 0x81E9 => 0xFF,        // LDX #$FF
  0x81EA => 0xCA,                        // DEX
  0x81EB => 0xD0, 0x81EC => 0xFD,        // BNE -3
  0x81ED => 0x60,                        // RTS

  // === COLOR DEMO SUBROUTINE ($81F0) ===
  0x81F0 => 0xA9, 0x81F1 => 0x01,        // LDA #$01 (clear)
  0x81F2 => 0x8D, 0x81F3 => 0xEC, 0x81F4 => 0xC3,  // STA $C3EC

  // Write "RAINBOW!"
  0x81F5 => 0xA9, 0x81F6 => ord('R'),    // LDA #'R'
  0x81F7 => 0x8D, 0x81F8 => 0x00, 0x81F9 => 0xC0,  // STA $C000
  0x81FA => 0xA9, 0x81FB => ord('A'),    // LDA #'A'
  0x81FC => 0x8D, 0x81FD => 0x01, 0x81FE => 0xC0,  // STA $C001
  0x81FF => 0xA9, 0x8200 => ord('I'),    // LDA #'I'
  0x8201 => 0x8D, 0x8202 => 0x02, 0x8203 => 0xC0,  // STA $C002
  0x8204 => 0xA9, 0x8205 => ord('N'),    // LDA #'N'
  0x8206 => 0x8D, 0x8207 => 0x03, 0x8208 => 0xC0,  // STA $C003
  0x8209 => 0xA9, 0x820A => ord('B'),    // LDA #'B'
  0x820B => 0x8D, 0x820C => 0x04, 0x820D => 0xC0,  // STA $C004
  0x820E => 0xA9, 0x820F => ord('O'),    // LDA #'O'
  0x8210 => 0x8D, 0x8211 => 0x05, 0x8212 => 0xC0,  // STA $C005
  0x8213 => 0xA9, 0x8214 => ord('W'),    // LDA #'W'
  0x8215 => 0x8D, 0x8216 => 0x06, 0x8217 => 0xC0,  // STA $C006
  0x8218 => 0xA9, 0x8219 => ord('!'),    // LDA #'!'
  0x821A => 0x8D, 0x821B => 0x07, 0x821C => 0xC0,  // STA $C007

  // Create rainbow pattern
  0x821D => 0xA2, 0x821E => 0x01,        // LDX #$01 (start from color 1)
  0x821F => 0x8A,                        // TXA
  0x8220 => 0x8D, 0x8221 => 0xEA, 0x8222 => 0xC3,  // STA $C3EA (fg color)
  0x8223 => 0xA9, 0x8224 => 0x2A,        // LDA #'*'
  0x8225 => 0x9D, 0x8226 => 0x27, 0x8227 => 0xC0,  // STA $C027,X (row 2)
  0x8228 => 0xA9, 0x8229 => 0x2A,        // LDA #'*'
  0x822A => 0x9D, 0x822B => 0x4F, 0x822C => 0xC0,  // STA $C04F,X (row 3)
  0x822D => 0xE8,                        // INX
  0x822E => 0xE0, 0x822F => 0x10,        // CPX #16 (16 colors)
  0x8230 => 0xD0, 0x8231 => 0xED,        // BNE -19

  // Delay
  0x8232 => 0xA2, 0x8233 => 0xFF,        // LDX #$FF
  0x8234 => 0xCA,                        // DEX
  0x8235 => 0xD0, 0x8236 => 0xFD,        // BNE -3
  0x8237 => 0x60,                        // RTS

  // === FINALE SUBROUTINE ($8240) ===
  0x8240 => 0xA9, 0x8241 => 0x01,        // LDA #$01 (clear)
  0x8242 => 0x8D, 0x8243 => 0xEC, 0x8244 => 0xC3,  // STA $C3EC

  // Set bright green for success
  0x8245 => 0xA9, 0x8246 => 0x0A,        // LDA #$0A (bright green)
  0x8247 => 0x8D, 0x8248 => 0xEA, 0x8249 => 0xC3,  // STA $C3EA

  // Write "SUCCESS! SYSTEM READY!"
  0x824A => 0xA9, 0x824B => ord('S'),    // LDA #'S'
  0x824C => 0x8D, 0x824D => 0x05, 0x824E => 0xC0,  // STA $C005
  0x824F => 0xA9, 0x8250 => ord('U'),    // LDA #'U'
  0x8251 => 0x8D, 0x8252 => 0x06, 0x8253 => 0xC0,  // STA $C006
  0x8254 => 0xA9, 0x8255 => ord('C'),    // LDA #'C'
  0x8256 => 0x8D, 0x8257 => 0x07, 0x8258 => 0xC0,  // STA $C007
  0x8259 => 0xA9, 0x825A => ord('C'),    // LDA #'C'
  0x825B => 0x8D, 0x825C => 0x08, 0x825D => 0xC0,  // STA $C008
  0x825E => 0xA9, 0x825F => ord('E'),    // LDA #'E'
  0x8260 => 0x8D, 0x8261 => 0x09, 0x8262 => 0xC0,  // STA $C009
  0x8263 => 0xA9, 0x8264 => ord('S'),    // LDA #'S'
  0x8265 => 0x8D, 0x8266 => 0x0A, 0x8267 => 0xC0,  // STA $C00A
  0x8268 => 0xA9, 0x8269 => ord('S'),    // LDA #'S'
  0x826A => 0x8D, 0x826B => 0x0B, 0x826C => 0xC0,  // STA $C00B
  0x826D => 0xA9, 0x826E => ord('!'),    // LDA #'!'
  0x826F => 0x8D, 0x8270 => 0x0C, 0x8271 => 0xC0,  // STA $C00C

  // Second line "SYSTEM READY"
  0x8272 => 0xA9, 0x8273 => ord('S'),    // LDA #'S'
  0x8274 => 0x8D, 0x8275 => 0x2C, 0x8276 => 0xC0,  // STA $C02C (row 2)
  0x8277 => 0xA9, 0x8278 => ord('Y'),    // LDA #'Y'
  0x8279 => 0x8D, 0x827A => 0x2D, 0x827B => 0xC0,  // STA $C02D
  0x827C => 0xA9, 0x827D => ord('S'),    // LDA #'S'
  0x827E => 0x8D, 0x827F => 0x2E, 0x8280 => 0xC0,  // STA $C02E
  0x8281 => 0xA9, 0x8282 => ord('T'),    // LDA #'T'
  0x8283 => 0x8D, 0x8284 => 0x2F, 0x8285 => 0xC0,  // STA $C02F
  0x8286 => 0xA9, 0x8287 => ord('E'),    // LDA #'E'
  0x8288 => 0x8D, 0x8289 => 0x30, 0x828A => 0xC0,  // STA $C030
  0x828B => 0xA9, 0x828C => ord('M'),    // LDA #'M'
  0x828D => 0x8D, 0x828E => 0x31, 0x828F => 0xC0,  // STA $C031
  0x8290 => 0xA9, 0x8291 => ord(' '),    // LDA #' '
  0x8292 => 0x8D, 0x8293 => 0x32, 0x8294 => 0xC0,  // STA $C032
  0x8295 => 0xA9, 0x8296 => ord('R'),    // LDA #'R'
  0x8297 => 0x8D, 0x8298 => 0x33, 0x8299 => 0xC0,  // STA $C033
  0x829A => 0xA9, 0x829B => ord('E'),    // LDA #'E'
  0x829C => 0x8D, 0x829D => 0x34, 0x829E => 0xC0,  // STA $C034
  0x829F => 0xA9, 0x82A0 => ord('A'),    // LDA #'A'
  0x82A1 => 0x8D, 0x82A2 => 0x35, 0x82A3 => 0xC0,  // STA $C035
  0x82A4 => 0xA9, 0x82A5 => ord('D'),    // LDA #'D'
  0x82A6 => 0x8D, 0x82A7 => 0x36, 0x82A8 => 0xC0,  // STA $C036
  0x82A9 => 0xA9, 0x82AA => ord('Y'),    // LDA #'Y'
  0x82AB => 0x8D, 0x82AC => 0x37, 0x82AD => 0xC0,  // STA $C037
  0x82AE => 0xA9, 0x82AF => ord('!'),    // LDA #'!'
  0x82B0 => 0x8D, 0x82B1 => 0x38, 0x82B2 => 0xC0,  // STA $C038

  // Victory fanfare - 3 tone chord
  0x82B3 => 0xA9, 0x82B4 => 0x60,        // LDA #$60 (C note)
  0x82B5 => 0x8D, 0x82B6 => 0x00, 0x82B7 => 0xC4,  // STA $C400
  0x82B8 => 0xA9, 0x82B9 => 0x80,        // LDA #$80 (E note)
  0x82BA => 0x8D, 0x82BB => 0x04, 0x82BC => 0xC4,  // STA $C404
  0x82BD => 0xA9, 0x82BE => 0xA0,        // LDA #$A0 (G note)
  0x82BF => 0x8D, 0x82C0 => 0x08, 0x82C1 => 0xC4,  // STA $C408

  // Enable all channels
  0x82C2 => 0xA9, 0x82C3 => 0x0F,        // LDA #$0F (volume)
  0x82C4 => 0x8D, 0x82C5 => 0x02, 0x82C6 => 0xC4,  // STA $C402
  0x82C7 => 0x8D, 0x82C8 => 0x06, 0x82C9 => 0xC4,  // STA $C406
  0x82CA => 0x8D, 0x82CB => 0x0A, 0x82CC => 0xC4,  // STA $C40A
  0x82CD => 0xA9, 0x82CE => 0x01,        // LDA #$01 (enable)
  0x82CF => 0x8D, 0x82D0 => 0x03, 0x82D1 => 0xC4,  // STA $C403
  0x82D2 => 0x8D, 0x82D3 => 0x07, 0x82D4 => 0xC4,  // STA $C407
  0x82D5 => 0x8D, 0x82D6 => 0x0B, 0x82D7 => 0xC4,  // STA $C40B

  // Final long delay
  0x82D8 => 0xA0, 0x82D9 => 0xFF,        // LDY #$FF
  0x82DA => 0x88,                        // DEY
  0x82DB => 0xD0, 0x82DC => 0xFD,        // BNE -3
  0x82DD => 0x60,                        // RTS
];

// Load the program
foreach ($program as $addr => $value) {
  $memory->write_byte($addr, $value);
}

echo "🚀 Running complete system demonstration...\n\n";

$cpu->reset();

$phases = ["🎬 Welcome", "📺 Display", "🔊 Sound", "🌈 Colors", "🎉 Finale", "✅ Complete"];
$phaseIndex = 0;
$lastPhaseChange = 0;

try {
  $instructionCount = 0;
  $lastRefresh = microtime(true);

  while ($instructionCount < 5000) {
    $cpu->executeInstruction();
    $instructionCount++;

    // Track demo phases by PC
    $pc = $cpu->pc;
    $newPhaseIndex = $phaseIndex;

    if ($pc >= 0x8100 && $pc < 0x8150 && $phaseIndex < 1) $newPhaseIndex = 0;
    elseif ($pc >= 0x8150 && $pc < 0x81A0 && $phaseIndex < 2) $newPhaseIndex = 1;
    elseif ($pc >= 0x81A0 && $pc < 0x81F0 && $phaseIndex < 3) $newPhaseIndex = 2;
    elseif ($pc >= 0x81F0 && $pc < 0x8240 && $phaseIndex < 4) $newPhaseIndex = 3;
    elseif ($pc >= 0x8240 && $phaseIndex < 5) $newPhaseIndex = 4;
    elseif ($pc == 0x800F) $newPhaseIndex = 5;

    if ($newPhaseIndex != $phaseIndex) {
      $phaseIndex = $newPhaseIndex;
      $lastPhaseChange = $instructionCount;
      echo "\n" . $phases[$phaseIndex] . " phase starting...\n";
    }

    // Refresh display periodically
    $now = microtime(true);
    if ($now - $lastRefresh > 0.2) {
      $console->refresh();
      $lastRefresh = $now;
      echo "\rInstructions: $instructionCount | Phase: " . $phases[$phaseIndex] . " | PC: 0x" . sprintf('%04X', $pc);
      flush();
    }

    // Exit if we hit the infinite loop
    if ($pc == 0x800F && $instructionCount > 1000) {
      echo "\n\n🎉 Demo completed successfully!\n";
      break;
    }

    usleep(1000); // 1ms delay
  }
} catch (Exception $e) {
  echo "\n❌ Error: " . $e->getMessage() . "\n";
  echo "PC: 0x" . sprintf('%04X', $cpu->pc) . "\n";
}

// Final refresh
$console->refresh();

echo "\n\n🎯 === DEMONSTRATION COMPLETE === 🎯\n";
echo "✅ All systems operational!\n";
echo "✅ CPU: Executing complex programs\n";
echo "✅ Display: 40x25 text with colors\n";
echo "✅ Sound: Multi-channel audio\n";
echo "✅ Memory: 64KB with I/O mapping\n";
echo "✅ Bus: Modular peripheral system\n";
echo "\n🚀 Your Enhanced 6502 System is ready for NES development!\n";